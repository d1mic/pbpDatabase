#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include "dbmcon1.h"
#include "dbmcon2.h"

EXEC SQL INCLUDE SQLCA;

int is_error(char *str);
int TwoDbConnectType2OnePhaseCommit(void);

#define CHECKERR(str) if(is_error(str)) exit(1);

EXEC SQL BEGIN DECLARE SECTION;
  char dbAlias1[15];
  char dbAlias2[15];
  char user1[129];
  char user2[129];
  char pswd1[15];
  char pswd2[15];
EXEC SQL END DECLARE SECTION;

int main(int argc, char *argv[])
{
  int rc = 0;

  strcpy(dbAlias1, argv[1]);
  strcpy(dbAlias2, argv[2]);
  strcpy(user1, argv[3]);
  strcpy(pswd1, argv[4]);
    
  if (rc != 0) return rc;

  rc = TwoDbConnectType2OnePhaseCommit();

  return 0;
}


int TwoDbConnectType2OnePhaseCommit(void)
{
  /* setup strukture */
  int rc = 0;
  struct sqlca sqlca;
  struct sqle_conn_setting clientAppInfo[3];

  clientAppInfo[0].type = SQL_CONNECT_TYPE;
  clientAppInfo[0].value = SQL_CONNECT_2;

  clientAppInfo[1].type = SQL_DISCONNECT;
  clientAppInfo[1].value = SQL_DISCONNECT_EXPL;

  clientAppInfo[2].type = SQL_SYNCPOINT;
  clientAppInfo[2].value = SQL_SYNC_ONEPHASE;

  /* set client information */
  sqlesetc(&clientAppInfo[0], 3, &sqlca);
  
  /* konekcija na obe baze */
  EXEC SQL CONNECT TO :dbAlias1 USER :user1 USING :pswd1;
  CHECKERR("Connect1");
  EXEC SQL CONNECT TO :dbAlias2 USER :user1 USING :pswd1;
  CHECKERR("Connect2");
  
  /* update prve baze */
  EXEC SQL SET CONNECTION :dbAlias1;
  CHECKERR("Set connection 1");
  rc = FirstDbUpdateBodovi();
  EXEC SQL COMMIT;
  CHECKERR("Commit");

  /* insert u drugu bazu */
  EXEC SQL SET CONNECTION :dbAlias2;
  CHECKERR("Set connection 2");
  rc = SecondDbInsert();
  EXEC SQL COMMIT;
  CHECKERR("Commit");

  /* ispis prve baze */
  EXEC SQL SET CONNECTION :dbAlias1;
  CHECKERR("Set connection 1");
  rc = FirstDbList();
  EXEC SQL COMMIT;
  CHECKERR("Commit");

  /*ispis druge baze */
  EXEC SQL SET CONNECTION :dbAlias2;
  CHECKERR("Set connection 2");
  rc = SecondDbList();
  EXEC SQL COMMIT;
  CHECKERR("Commit");

  EXEC SQL DISCONNECT ALL;

  return 0;
} 

int is_error(char *str){
  
  if(SQLCODE <0 ){
    EXEC SQL ROLLBACK;
    printf("%s %d\n", str, SQLCODE);
    return 1;
  }
  return 0;
}